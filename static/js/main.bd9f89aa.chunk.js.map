{"version":3,"sources":["components/main/Main.js","components/question/Question.js","components/quiz/Quiz.js","App.js","index.js"],"names":["Main","className","Question","props","question","randomAnswers","map","answer","inx","onClick","click","style","background","wrong","highlight","opacity","Quiz","React","useState","data","setData","checkedAnswers","setCheckedAnswers","score","setScore","isNewGame","setNewGame","handleClick","id","answerClicked","prev","useEffect","fetch","then","res","json","quiz","results","every","item","prevState","newAllAnswers","allAnswers","incorrect_answers","correct_answer","i","length","push","randomIndex","Math","floor","random","randomValueIndex","splice","val","alert","reduce","acc","App","ready","setReady","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd9f89aa.chunk.js","sourcesContent":["export default function Main() {\n  return (\n    <section className=\"main\">\n      <h1 className=\"main-title\">Quizzical</h1>\n      <h3 className=\"main-p\">Click button When ready to take quiz!</h3>\n    </section>\n  );\n}\n","export default function Question(props) {\n  return (\n    <div className=\"questionContainer\">\n      <p className=\"question\">{props.question.question}</p>\n      <div className=\"answersContainer\">\n        {/*We iterate through the random answers property of each question to\n        evaluate its status*/}\n        {props.question.randomAnswers.map((answer, inx) => (\n          <button\n            key={inx}\n            className=\"answers\"\n            onClick={() => props.click(props.question.question, answer)}\n            style={{\n              background:\n                //props.question.wrong has the correct answer. I compare it to the right answer in the prop random answers to highlight it red if the user didnt choose it. Only wrong answered questions will have the property \"wrong\".\n                props.question.wrong === answer\n                  ? \"#F8BCBC\"\n                  : //All chosen answers will be highlighted in green background. Only questions that have passed through the checkanswers process will have the highlight property.\n                  props.question.highlight === answer\n                  ? \"#94D7A2\"\n                  : //all selected answers in the ui will have a gray background until the checking process. Only questions that have a selected answer by the user will have the \"answer\" property.\n                  props.question.answer === answer\n                  ? \"#D6DBF5\"\n                  : \"white\",\n              //All incorrect or unselected answers will have an opacity of 0.7 after the go thourgh the checking proccess wich will add the highlight prop.\n              opacity:\n                answer !== props.question.highlight &&\n                props.question.highlight &&\n                \"0.7\",\n            }}\n          >\n            {answer}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { waitForDomChange } from \"@testing-library/react\";\nimport React from \"react\";\nimport Question from \"../question/Question\";\n\nexport default function Quiz() {\n  const [data, setData] = React.useState([]);\n  const [checkedAnswers, setCheckedAnswers] = React.useState(false);\n  const [score, setScore] = React.useState(0);\n  const [isNewGame, setNewGame] = React.useState(false);\n\n  React.useEffect(() => {\n    //retrieving data from opentdb\n    fetch(\n      \"https://opentdb.com/api.php?amount=5&category=9&difficulty=easy&type=multiple\"\n    )\n      .then((res) => res.json())\n      .then((quiz) => setData(quiz.results));\n  }, [isNewGame]);\n\n  //setRandomAnswers function adds a new prop to each of our questions called randomAnswers. This prop adds all answers in the question object randomly so they are displayed in different order everytime\n  function setRandomAnswers(arrData) {\n    setData((prevState) => {\n      return prevState.map((question) => {\n        const randomAnswers = []; //array of indexes to access the anwers in the object question\n        const newAllAnswers = []; //randomly generated answers\n        const allAnswers = [\n          //all the answers in question object\n          ...question.incorrect_answers,\n          question.correct_answer,\n        ];\n        //i assign indexes to randomAnswers wich will serve as the random indexes to get the newAllAnswers answers\n        for (let i = 0; i < allAnswers.length; i++) {\n          randomAnswers.push(i);\n        }\n\n        //for each answer in allAnswers we will pick one randomly and push it to newAllAnswers\n        for (let i = 0; i < allAnswers.length; i++) {\n          //we select a random index from ransomAnswers length\n          const randomIndex = Math.floor(Math.random() * randomAnswers.length);\n          //i use the randomIndex variable to access one of the index values in randomAnswers\n          const randomValueIndex = randomAnswers[randomIndex];\n          //from randomAnswers i erase one of the index values so is not used again so i dont push the same answer to newAllAnswers\n          randomAnswers.splice(randomIndex, 1);\n          //the randomly selected value is pushed to the newAllAnswers variable wich will be the randomAnswers prop in the question object\n          newAllAnswers.push(allAnswers[randomValueIndex]);\n        }\n        return {\n          ...question,\n          //random answers created\n          randomAnswers: [...newAllAnswers],\n        };\n      });\n    });\n  }\n\n  //if our data doesnt have the prop randomAnswers i call setRandomAnswers to create it\n  if (!data.every((item) => item.randomAnswers)) {\n    setRandomAnswers(data);\n  }\n\n  //when the user selects one answer from those availble this function will create the answer prop in our questions data that will hold the value of the answer selected so we can compare it to the correct answer\n  function handleClick(id, answerClicked) {\n    if (!checkedAnswers) {\n      //if the user already pressed the check answers button he will no longer be able to select other answers\n      setData((prev) => {\n        return prev.map((question) => {\n          //if the id and the question match i create the answer prop\n          if (question.question === id) {\n            return {\n              ...question,\n              answer: answerClicked,\n            };\n          } else return question;\n        });\n      });\n    }\n  }\n\n  //Once the user has selected all answers and presses the check answers button this function will excecute\n  function checkAnswers() {\n    if (data.every((val) => val.answer)) {\n      //if all questions have the answer property i check the results\n      setData((prevState) => {\n        return prevState.map((question) => {\n          //if the selected answer is different to the correct answer i create a \"wrong\" prop that will hold the correct answer wich has a further use. The highlight prop is specifically to highlight the chosen answer with green background, therefore all questions will have it\n          if (question.answer !== question.correct_answer) {\n            return {\n              ...question,\n              wrong: question.correct_answer,\n              highlight: question.answer,\n            };\n          } else {\n            return {\n              //if the answer is correct i simply create the highlight prop wich equals the answer. The highlight prop is created to know that a question has pass through the checking answer proccess\n              ...question,\n              highlight: question.answer,\n            };\n          }\n        });\n      });\n      setCheckedAnswers(true); //checkedAnswers is set to true to know that the evaluation proccess has ended\n    } else {\n      //if you dont select all answers an alert message will appear\n      alert(\"You must select an answer for every question\");\n    }\n    //When finishing the evaluation proccess i set the score according to the number of right answers\n    setScore(\n      data.reduce((acc, item) => {\n        let num = 0;\n        if (item.correct_answer === item.answer) {\n          acc += 1;\n        }\n        return acc;\n      }, 0)\n    );\n  }\n  //the newgame function resets our states to start a new trivia game\n  function newGame() {\n    setCheckedAnswers(false);\n    setScore(0);\n    setNewGame((prevState) => !prevState); //isNewGame will make useEffect to fetch data from the trivia api to refresh our question data and remove the properties added\n  }\n\n  return (\n    <section className=\"hero\">\n      {data.length > 0 ? ( //if we dont have data the loading message will appear on screen\n        <div>\n          {/* rendering all questions */}\n          {data.map((question, inx) => (\n            <Question key={inx} click={handleClick} question={question} />\n          ))}\n        </div>\n      ) : (\n        <h2 className=\"loading\">LOADING...</h2>\n      )}\n\n      <div className=\"checkAnswersContainer\">\n        {/* if the checking proccess is over i render the score */}\n        {checkedAnswers && (\n          <p className=\"score\">\n            You scored {score}/{data.length} correct answers\n          </p>\n        )}\n        {/* if the checking proccess hasnt started i render the \"Check answers\" button, if it has, i render the \"Play Again\" button */}\n        {!checkedAnswers ? (\n          <button className=\"checkAnswers\" onClick={checkAnswers}>\n            Check Answers\n          </button>\n        ) : (\n          <button className=\"newGame\" onClick={newGame}>\n            Play again\n          </button>\n        )}\n      </div>\n    </section>\n  );\n}\n\n//API\n//https://opentdb.com/api.php?amount=5&category=9&difficulty=easy&type=multiple\n\n//this is the data format retrieved from the API\n\n// {\n//   \"response_code\": 0,\n//   \"results\": [\n//   {\n//   \"category\": \"General Knowledge\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"easy\",\n//   \"question\": \"What does the &#039;S&#039; stand for in the abbreviation SIM, as in SIM card? \",\n//   \"correct_answer\": \"Subscriber\",\n//   \"incorrect_answers\": [\n//   \"Single\",\n//   \"Secure\",\n//   \"Solid\"\n//   ]\n//   },\n//   {\n//   \"category\": \"General Knowledge\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"easy\",\n//   \"question\": \"What alcoholic drink is made from molasses?\",\n//   \"correct_answer\": \"Rum\",\n//   \"incorrect_answers\": [\n//   \"Gin\",\n//   \"Vodka\",\n//   \"Whisky\"\n//   ]\n//   },\n//   {\n//   \"category\": \"General Knowledge\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"easy\",\n//   \"question\": \"According to Sherlock Holmes, &quot;If you eliminate the impossible, whatever remains, however improbable, must be the...&quot;\",\n//   \"correct_answer\": \"Truth\",\n//   \"incorrect_answers\": [\n//   \"Answer\",\n//   \"Cause\",\n//   \"Source\"\n//   ]\n//   },\n//   {\n//   \"category\": \"General Knowledge\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"easy\",\n//   \"question\": \"What do the letters of the fast food chain KFC stand for?\",\n//   \"correct_answer\": \"Kentucky Fried Chicken\",\n//   \"incorrect_answers\": [\n//   \"Kentucky Fresh Cheese\",\n//   \"Kibbled Freaky Cow\",\n//   \"Kiwi Food Cut\"\n//   ]\n//   },\n//   {\n//   \"category\": \"General Knowledge\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"easy\",\n//   \"question\": \"According to the nursery rhyme, what fruit did Little Jack Horner pull out of his Christmas pie?\",\n//   \"correct_answer\": \"Plum\",\n//   \"incorrect_answers\": [\n//   \"Apple\",\n//   \"Peach\",\n//   \"Pear\"\n//   ]\n//   }\n//   ]\n//   }\n","import React from \"react\";\nimport Main from \"./components/main/Main\";\nimport Quiz from \"./components/quiz/Quiz\";\n\nexport default function App() {\n  const [ready, setReady] = React.useState(false);\n  return (\n    <main>\n      {!ready ? (\n        <>\n          <Main />\n          <button className=\"start\" onClick={() => setReady((prev) => !prev)}>\n            Start Quiz\n          </button>\n        </>\n      ) : (\n        <Quiz />\n      )}\n    </main>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}